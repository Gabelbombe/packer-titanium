# Install OS instead of upgrade
install

# Use CDROM installation media
cdrom

text
poweroff


## Define Language/locale settings:

# Keyboard layouts
keyboard --vckeymap=us --xlayouts='us'

# System language
lang en_US.UTF-8

##REF: https://linuxconfig.org/how-to-open-ssh-port-22-on-rehdat-7-linux-server
firewall --enabled --service=ssh
firewall --zone=public --add-port=22/tcp --permanent
firewall --reload

##Force opening?
%post%
ifconfig 22 127.0.0.1 netmask 255.255.255.0 up
route add default gw 127.0.0.1 22
%end%



## Define Network, time and timezone settings
# Network information
network  --bootproto=dhcp --device=eth0 --ipv6=auto --onboot=yes --activate
network  --hostname=titanium.test.local

# Set repo to mirror.centos.org
repo --name="CentOS" --baseurl=http://mirror.centos.org/centos/6/os/x86_64/ --cost=100
repo --name="Updates" --baseurl=http://mirror.centos.org/centos/6/updates/x86_64/ --cost=100

#set root pw here (required by KS), remove pw in post
rootpw temp

authconfig --enableshadow --passalgo=sha512

firstboot --disabled


# System timezone
timezone America/Los_Angeles--isUtc --ntpservers=0.centos.pool.ntp.org,1.centos.pool.ntp.org,2.centos.pool.nt


## Define User/Authentication settings
# System authorization information
auth --enableshadow --passalgo=sha512

# Root password
user --groups=wheel --homedir=/home/gabelbombe --name=marc --password=temp --gecos="till"



# System services
services --enabled=NetworkManager,sshd,chronyd
services --enabled=ntpd,ntpdate

# Installation logging level
logging --level=debug

# Bootloader
bootloader --location=mbr --driveorder=vda --append="tsc=reliable divider=10 console=ttyS0,115200n8 console=tty0"

authconfig --enableshadow --passalgo=sha512

# Clear the Master Boot Record
zerombr

# Automatically create partitions
autopart

# Partition clearing information
#clearpart --all --initlabel --drives=sda

%packages --nobase
@core --nodefaults
acpid
iputils
man
ntp
ntpdate
openssh-clients
parted
vim-common
vim-enhanced
vim-minimal
wget
# Exclude packages that are not needed in a VM image
-aic94xx-firmware
-atmel-firmware
-bfa-firmware
-ipw*-firmware
-ivtv-firmware
-iwl*firmware
-libertas-*-firmware
-ql*-firmware
-rt*-firmware
-xorg-x11-drv-ati-firmware
-zd1211-firmware

%end

## NOTE: This breaks shit for some reason....
## force packer user
%post


# Newly created users need the file/folder framework for SSH key authentication.
umask 0077
mkdir /etc/skel/.ssh
touch /etc/skel/.ssh/authorized_keys

# Loop over the command line. Set interesting variables.
for x in $(cat /proc/cmdline)
do
case $x in
PACKER_USER=)
  PACKER_USER="${x#=}"
  ;;
PACKER_AUTHORIZED_KEY=)
  # URL decode $encoded into $PACKER_AUTHORIZED_KEY
  encoded=$(echo "${x#=}" | tr '+' ' ')
  printf -v PACKER_AUTHORIZED_KEY '%b' "${encoded//%/\x}"
  ;;
esac
done

# Create/configure packer user, if any.
if [ -n "$PACKER_USER" ]
then
useradd $PACKER_USER
echo "%$PACKER_USER ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers.d/$PACKER_USER
[ -n "$PACKER_AUTHORIZED_KEY" ] && echo $PACKER_AUTHORIZED_KEY >> $(eval echo ~"$PACKER_USER")/.ssh/authorized_keys
fi

%end

%post --log=/var/log/ks.post02.log
#!/bin/bash

set -x

# Remove root password
echo "Resetting root password"
echo -e "root\nroot" | passwd root

## Build date used for motd and product file
BUILDDATE=$(date +%Y%m%d)
NAME="Titanium Cloud 18.03-b9"
DOCS="https://www.windriver.com/products/titanium-cloud/#edge_cloud"

# Create MOTD
echo "Creating /etc/motd"
mv /etc/motd /etc/motd-backup
cat << MOTD > /etc/motd
   __        .                   .
 _|  |_      | .-. .  . .-. :--. |-
|_    _|     ;|   ||  |(.-' |  | Resetting|__|   \`--'  \`-' \`;-| \`-' '  ' \`-'
                   /  ;  Instance ($NAME $BUILDDATE)
                   \`-'   $DOCS
MOTD
# MOTD symlinks
echo "Creating /etc/motd symlinks"
ln -sf /etc/motd /etc/issue
ln -sf /etc/motd /etc/issue.net

# Create product file
echo "Creating /etc/product file"
cat << PRODUCT > /etc/product
Name: Titanium Instance
Image: $NAME $BUILDDATE
Documentation: $DOCS
Description: $NAME 64-bit image with just essential packages installed. Ideal for users who are comfortable with setting up their own environment and tools.
PRODUCT

# Make sure the eth0 interface is setup correctly for yum
echo "Setting up eth0 (via dhcp) for yum"
cat << ETH0 > /etc/sysconfig/network-scripts/ifcfg-eth0
DEVICE="eth0"
ONBOOT="yes"
BOOTPROTO="dhcp"
ETH0

# Make sure eth0 is working correctly
echo "ifdown eth0"
ifdown eth0
echo "ifup eth0"
ifup eth0

# Make sure we have the latest security updates
echo "Updating packages"
/usr/bin/yum clean all
/usr/bin/yum -y update

# Install Node.js and json via EPEL
/usr/bin/yum install -y epel-release
/usr/bin/yum install -y nodejs npm
/usr/bin/npm install -g json

# Clean up all yum caches
echo "Cleaning up yum caches"
/usr/bin/yum clean all

# Clean up network devices
echo "Cleaning up network devices"
/bin/rm -f /etc/udev/rules.d/70-persistent-net.rules
rm -rf /etc/sysconfig/network-scripts/ifcfg-*
/bin/find /var/lib/dhclient -type f -exec rm -f '{}' +

# Remove hostname
echo "Resetting hostname"
cat /dev/null > /etc/hostname
sed '/HOSTNAME=/d' -i /etc/sysconfig/network

# Enable agetty on ttyS0 for `vmadm console` command (IMAGE-363)
cat << TTYS0 > /etc/init/ttyS0.conf

# ttyS0 - agetty
#
# This service maintains a agetty on ttyS0.
stop on runlevel [S016]
start on runlevel [23]
respawn
exec agetty -h -L -w /dev/ttyS0 115200 vt102
TTYS0

# Tune Linux vm.dirty_background_bytes (IMAGE-439)
# The following tuning causes dirty data to begin to be background flushed at
# 100 Mbytes, so that it writes earlier and more often to avoid a large build
# up and improving overall throughput.
echo "Setting vm.dirty_background_bytes"
echo "vm.dirty_background_bytes=100000000" >> /etc/sysctl.conf

# Disable password auth. SSH logon is via ssh key only. A password is being set
# for root via the image manifest per IMAGE-459.
#echo "Disabling password auth in sshd_config"
#sed s/PasswordAuthentication\ yes/PasswordAuthentication\ no/ -i /etc/ssh/sshd_config

# Ensure Selinux is set to permissive
echo "Setting Selinux to permissive"
sed s/SELINUX=enforcing/SELINUX=permissive/ -i /etc/selinux/config

# Clean up files
echo "Ceaning up build files etc."
/bin/rm -rf /root/anaconda-ks.cfg
/bin/rm -rf /root/install.log
/bin/rm -rf /root/install.log.syslog
/bin/rm -rf /tmp/.npm/
/bin/rm -rf /tmp/ks-script*
/bin/rm -rf /var/log/anaconda*
/bin/rm -rf /var/log/dracut.log
%end
